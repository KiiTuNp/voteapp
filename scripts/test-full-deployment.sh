#!/bin/bash

# Test complet de d√©ploiement
echo "üöÄ Test complet de d√©ploiement Secret Poll"
echo "=========================================="

# Configuration de test
TEST_DIR="/tmp/secret-poll-full-test"
TEST_LOG="/tmp/deployment-test.log"

echo "üìã Configuration du test:"
echo "   R√©pertoire: $TEST_DIR"
echo "   Log: $TEST_LOG"
echo ""

# Nettoyage pr√©alable
if [[ -d "$TEST_DIR" ]]; then
    echo "üßπ Nettoyage du test pr√©c√©dent..."
    rm -rf "$TEST_DIR"
fi

# Initialisation des logs
echo "$(date): Test de d√©ploiement complet commenc√©" > "$TEST_LOG"

# Simulation d'entr√©es utilisateur pour d√©ploiement portable
echo "üéØ Lancement du d√©ploiement avec inputs simul√©s..."
echo "   Domain: localhost"  
echo "   Directory: $TEST_DIR"
echo "   Type: 3 (Portable)"
echo "   SSL: n"

# Lancer le d√©ploiement avec timeout pour √©viter les blocages
timeout 300 bash -c "
echo -e 'localhost\n$TEST_DIR\n3\nn' | /app/scripts/deploy-final.sh
" >> "$TEST_LOG" 2>&1

# V√©rifier les r√©sultats
echo ""
echo "üîç V√©rification des r√©sultats..."

if [[ -d "$TEST_DIR" ]]; then
    echo "‚úÖ R√©pertoire de d√©ploiement cr√©√©"
    
    # V√©rifier la structure des fichiers
    echo ""
    echo "üìÅ Structure des fichiers cr√©√©s:"
    
    essential_files=(
        "$TEST_DIR/.git"
        "$TEST_DIR/backend/server.py"
        "$TEST_DIR/backend/requirements.txt"
        "$TEST_DIR/backend/.env"
        "$TEST_DIR/frontend/package.json"
        "$TEST_DIR/frontend/.env"
        "$TEST_DIR/start.sh"
        "$TEST_DIR/stop.sh"
        "$TEST_DIR/status.sh"
    )
    
    for file in "${essential_files[@]}"; do
        if [[ -e "$file" ]]; then
            echo "‚úÖ $(basename "$file")"
        else
            echo "‚ùå $(basename "$file") manquant"
        fi
    done
    
    # V√©rifier les permissions des scripts
    echo ""
    echo "üîê Permissions des scripts:"
    for script in "$TEST_DIR"/{start,stop,status}.sh; do
        if [[ -x "$script" ]]; then
            echo "‚úÖ $(basename "$script") ex√©cutable"
        else
            echo "‚ùå $(basename "$script") non ex√©cutable"
        fi
    done
    
    # V√©rifier le contenu des fichiers .env
    echo ""
    echo "‚öôÔ∏è Configuration des environnements:"
    
    if grep -q "mongodb://localhost:27017/poll_app" "$TEST_DIR/backend/.env" 2>/dev/null; then
        echo "‚úÖ Backend .env configur√© correctement"
    else
        echo "‚ùå Backend .env incorrect"
    fi
    
    if grep -q "http://localhost:8001" "$TEST_DIR/frontend/.env" 2>/dev/null; then
        echo "‚úÖ Frontend .env configur√© correctement"
    else
        echo "‚ùå Frontend .env incorrect"
    fi
    
else
    echo "‚ùå R√©pertoire de d√©ploiement NON cr√©√©"
fi

# Analyser les logs
echo ""
echo "üìÑ Analyse des logs de d√©ploiement:"
if [[ -f "$TEST_LOG" ]]; then
    local log_size=$(wc -l < "$TEST_LOG")
    echo "   Taille: $log_size lignes"
    
    # Chercher les erreurs
    local errors=$(grep -i "error\|erreur\|failed\|√©chec" "$TEST_LOG" 2>/dev/null | wc -l)
    if [[ $errors -gt 0 ]]; then
        echo "‚ö†Ô∏è  $errors erreur(s) d√©tect√©e(s)"
        echo ""
        echo "Derni√®res erreurs:"
        grep -i "error\|erreur\|failed\|√©chec" "$TEST_LOG" | tail -3
    else
        echo "‚úÖ Aucune erreur d√©tect√©e"
    fi
    
    # Afficher les derni√®res lignes
    echo ""
    echo "Derni√®res lignes du log:"
    tail -5 "$TEST_LOG"
    
else
    echo "‚ùå Fichier de log non trouv√©"
fi

# Test de syntaxe des scripts g√©n√©r√©s
if [[ -d "$TEST_DIR" ]]; then
    echo ""
    echo "üß™ Test de syntaxe des scripts g√©n√©r√©s:"
    
    for script in "$TEST_DIR"/{start,stop,status}.sh; do
        if [[ -f "$script" ]]; then
            if bash -n "$script" 2>/dev/null; then
                echo "‚úÖ $(basename "$script") - syntaxe OK"
            else
                echo "‚ùå $(basename "$script") - erreur syntaxe"
            fi
        fi
    done
fi

# R√©sum√© final
echo ""
echo "üìä R√âSUM√â DU TEST:"
if [[ -d "$TEST_DIR" ]]; then
    local success_count=0
    local total_checks=8
    
    # Compter les succ√®s
    [[ -e "$TEST_DIR/.git" ]] && ((success_count++))
    [[ -f "$TEST_DIR/backend/server.py" ]] && ((success_count++))
    [[ -f "$TEST_DIR/frontend/package.json" ]] && ((success_count++))
    [[ -f "$TEST_DIR/backend/.env" ]] && ((success_count++))
    [[ -f "$TEST_DIR/frontend/.env" ]] && ((success_count++))
    [[ -x "$TEST_DIR/start.sh" ]] && ((success_count++))
    [[ -x "$TEST_DIR/stop.sh" ]] && ((success_count++))
    [[ -x "$TEST_DIR/status.sh" ]] && ((success_count++))
    
    echo "‚úÖ D√©ploiement r√©ussi: $success_count/$total_checks v√©rifications"
    
    if [[ $success_count -eq $total_checks ]]; then
        echo "üéâ D√âPLOIEMENT PARFAITEMENT FONCTIONNEL!"
    else
        echo "‚ö†Ô∏è  D√©ploiement partiel - quelques √©l√©ments √† corriger"
    fi
else
    echo "‚ùå √âCHEC DU D√âPLOIEMENT"
fi

# Instructions de test manuel
if [[ -d "$TEST_DIR" ]]; then
    echo ""
    echo "üß™ Pour tester manuellement:"
    echo "   cd $TEST_DIR"
    echo "   sudo ./start.sh"
    echo "   ./status.sh"
    echo "   ./stop.sh"
fi

# Nettoyage optionnel
echo ""
read -p "üßπ Nettoyer les fichiers de test? [y/N]: " cleanup
if [[ "$cleanup" =~ ^[Yy]$ ]]; then
    rm -rf "$TEST_DIR" "$TEST_LOG"
    echo "‚úÖ Nettoyage termin√©"
else
    echo "üìÅ Fichiers conserv√©s pour inspection manuelle"
fi

echo ""
echo "Test termin√©."